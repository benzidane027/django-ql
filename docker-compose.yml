version: '3.8'
networks:
  app_net_ql:
    ipam:
      config:
        - subnet: 15.0.0.0/24

services:
  minio:
    image: minio/minio:latest
    container_name: minio
    ports:
      - "9000:9000"  # MinIO API port
      - "9001:9001"  # MinIO console port (web interface)
    volumes:
      - ./storage:/data    # Persistent storage for MinIO
    command: server /data --console-address ":9001"

    entrypoint: >
      /bin/sh -c '
        isAlive() { curl -sf http://minio:9000/minio/health/live; }                        # check if Minio is alive
        minio $0 "$@" --quiet & echo $! > /tmp/minio.pid                                   # start Minio in the background
        until isAlive; do sleep 1; done                                                    # wait until Minio is alive
        mc alias set myminio http://minio:9000 $${MINIO_ROOT_USER} $${MINIO_ROOT_PASSWORD} # setup Minio client
        mc mb myminio/$${MINIO_STORAGE_MEDIA_BUCKET_NAME}/ --ignore-existing                                       # create test bucket
        mc anonymous set public myminio/$${MINIO_STORAGE_MEDIA_BUCKET_NAME}                # make the test bucket public
        kill -s INT $(cat /tmp/minio.pid) && rm /tmp/minio.pid                             # stop Minio
        while isAlive; do sleep 0.1; done                                                  # wait until Minio is stopped
        exec minio $0 "$@"                                                                 # start Minio in the foreground
      '
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 10s
      retries: 3
    env_file:
      - ./app/.env
    networks:
      app_net_ql:
        ipv4_address: 15.0.0.40
  db:
    image: postgres:15
    restart: always
    container_name: postgres
    volumes:
      - ./database:/var/lib/postgresql/data:rw
    ports:
      - "5432:5432"
    networks:
      app_net_ql:
        ipv4_address: 15.0.0.20

    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $${POSTGRES_USER} -d $${POSTGRES_DB}"]
      interval: 10s
      retries: 5
      start_period: 30s
      timeout: 10s
    env_file:
      - ./app/.env
  # api:
  #   build: ./app
  #   restart: always
  #   container_name: django
  #   command: bash -c  "python manage.py makemigrations && python manage.py migrate && python manage.py runserver 0.0.0.0:8000"
  #   volumes:
  #     - ./app:/usr/src/app
  #   env_file:
  #     - ./app/.env
  #   depends_on:
  #     db: 
  #       condition: service_healthy
  #       restart: true
  #     minio: 
  #       condition: service_healthy
  #       restart: true
  #   networks:
  #     app_net_ql:
  #       ipv4_address: 15.0.0.10

  # proxy:
  #   image: nginx:latest
  #   restart: always
  #   container_name: nginx
  #   depends_on:
  #     - api
  #   volumes:
  #     - ./conf/cert.crt:/etc/nginx/ssl/cert.crt
  #     - ./conf/key.key:/etc/nginx/ssl/key.key
  #     - ./conf/nginx.conf:/etc/nginx/nginx.conf
  #     - ./conf/logs:/var/log/nginx

  #   ports:
  #     - "443:443"
  #   networks:
  #     app_net_ql:
  #       ipv4_address: 15.0.0.30
  #   env_file:
  #     - ./app/.env
  

volumes:
  data:
  app:
  conf:
  storage:
